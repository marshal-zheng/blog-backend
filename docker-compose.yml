version: "3.9"

# ───────────── 共用日志策略 ─────────────
x-common-logging: &common-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"

services:
  # ─────────────── 1) LLM Gateway ───────────────
  litellm:
    <<: *common-logging
    image: ghcr.io/berriai/litellm:main-latest          # 跟随主分支最新功能
    container_name: litellm-proxy
    command: >
      litellm
        --config /app/config/litellm.yaml
        --port 4000
        --request-logging
    env_file:
      - litellm/config-secret.env                       # 存放 OPENAI_API_KEY 等
    volumes:
      - ./litellm/litellm.yaml:/app/config/litellm.yaml:ro
    ports:
      - "4000:4000"                                     # 映射端口到宿主机
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/v1/models"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks: [backend]
    profiles: ["proxy", "full"]

  # ─────────────── 2) AI-Service (RAG / 工作流) ───────────────
  ai-service:
    <<: *common-logging
    build: ./ai-service
    container_name: ai-service
    env_file: [.env]                                    # DATABASE_URL / LITELLM_ENDPOINT
    depends_on: [litellm, pgvector]
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles: ["full"]

  # ─────────────── 3) pgvector (向量库) ───────────────
  pgvector:
    <<: *common-logging
    image: postgres:15-alpine
    container_name: pgvector
    environment:
      POSTGRES_USER: rag
      POSTGRES_PASSWORD: rag_pass
      POSTGRES_DB: rag_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./pgvector/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    networks: [backend]
    restart: unless-stopped
    profiles: ["full"]

  # ─────────────── 4) Prometheus ───────────────
  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ./grafana/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks: [backend]
    restart: unless-stopped
    profiles: ["full"]

  # ─────────────── 5) Grafana ───────────────
  grafana:
    image: grafana/grafana-oss:11.0.0
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on: [prometheus]
    networks: [backend]
    restart: unless-stopped
    profiles: ["full"]

# ─────────────── 网络与卷 ───────────────
networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  grafana_data:
